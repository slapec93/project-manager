require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/projects', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # adjust the attributes here as well.
  let(:project) { FactoryBot.create :project }
  let(:user) { FactoryBot.create :user }

  before do
    post '/login', params: {username: user.username}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get projects_url
      expect(response).to have_http_status :ok
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get project_url(project)
      expect(response).to have_http_status :ok
    end
  end

  describe 'PATCH /update' do
    subject(:patch_project) { patch project_url(project), params: {project: {status: status}} }

    let(:status) { 'planned' }

    it 'updates the requested project' do
      patch_project
      expect(project.reload).to have_attributes status: 'planned'
    end

    context 'when status is invalid' do
      let(:status) { 'invalid' }

      it 'does not update the status of project' do
        expect { patch_project }.to raise_error ArgumentError
        expect(project.reload).to have_attributes status: 'started'
      end
    end
  end
end
