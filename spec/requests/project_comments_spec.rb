require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/project_comments', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # ProjectComment. As you add validations to ProjectComment, be sure to
  # adjust the attributes here as well.
  let(:project) { FactoryBot.create :project }
  let(:project_id) { project.id }
  let(:user) { FactoryBot.create :user }

  describe 'POST /create' do
    subject(:create_comment) do
      post "/projects/#{project_id}/project_comments.json", params: {project_comment: {content: 'anything'}, headers: {'Content-Type': 'application/json'}}
    end

    before do
      post '/login', params: {username: user.username}
    end

    it 'creates a new ProjectComment' do
      expect { create_comment }.to change(ProjectComment, :count).by(1)
    end

    it 'responds with created status' do
      create_comment
      expect(response).to have_http_status :created
    end

    context 'when project id is not valid' do
      let(:project_id) { 'invalid' }

      it 'does not create a new ProjectComment' do
        expect {
          create_comment
        }.to change(ProjectComment, :count).by(0)
      end

      it 'reponds with unprocessable entity' do
        create_comment
        expect(response).to have_http_status :unprocessable_entity
      end
    end
  end
end
